theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction" || col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction" || col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(tinytex)
library(dplyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(corrr)
library(ppcor)
library(glmnet) # for Lasso Regression
data_train = read.csv("C:/Users/matti/Documents/GitHub/stat_project/train.csv")
data_test = read.csv("C:/Users/matti/Documents/GitHub/stat_project/test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data <- data %>% dplyr::select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# drop na values in Arrival_Delay_in_Minutes
data = data[!is.na(data$Arrival_Delay_in_Minutes),]
any(is.na(data))
# plot boxplot of each numeric variable excluding ratings features
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]])) +
geom_boxplot() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot distribution of categorical variables
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = .data[[col]])) +
geom_bar() +
labs(title = paste("Histogram of", col), x = col, y = "Count") +
guides(fill = FALSE)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot distribution of ratings features
plots = list()
my_palette <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#b15928")
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot <- ggplot(data, aes(x = .data[[col]], fill = factor(.data[[col]]))) +
geom_bar() +
geom_text(stat = 'count', aes(label = after_stat(count))) +
labs(title = paste("Histogram of ", col), x = col, y = "Count") +
scale_fill_manual(values = my_palette) +
guides(fill = FALSE)
plots[[col]] <- plot
}
grid.arrange(grobs = plots, ncol = 3)
# compute the mean value of all the ratings
ratings_data = data[, c(ratings_fts_names)]
ratings_data <- apply(ratings_data, 2, as.numeric)
ratings_mean = colMeans(ratings_data)
ratings_mean
# plot distribution and density of numeric variables excluding ratings features
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]])) +
geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.5) +
geom_density(alpha = 0.2, fill = "red") +
labs(title = paste("Histogram of", col), x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plots ratings features vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (!col %in% ratings_fts_names) {
next
}
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
theme_minimal() +
geom_bar(position = "dodge") +
labs(title = paste("Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
ds_cor2_df = data.frame()
for (row in rownames(ds_cor2)) {
for (col in colnames(ds_cor2)) {
# Check if the partial correlation is greater than 0.5 or less than -0.5
if (ds_cor2[row, col] > 0.5 | ds_cor2[row, col] < -0.5) {
# Create a new row with the feature names and correlation value
new_row <- c(row, col, ds_cor2[row, col])
# Append the new row to the 'partial_corr_cat_dataframe'
ds_cor2_df <- rbind(ds_cor2_df, new_row)
}
}
}
# Set appropriate column names for the result dataframe
colnames(ds_cor2_df)= c("Feature1", "Feature2", "CorrelationValue")
# delete correlation value for feature with themselves
ds_cor2_df = ds_cor2_df[ds_cor2_df$Feature1 != ds_cor2_df$Feature2,]
ds_cor2_df <- ds_cor2_df[!duplicated(ds_cor2_df$CorrelationValue), ]
# Print the resulting dataframe
head(ds_cor2_df)
ds_cor2_df = data.frame()
for (row in rownames(ds_cor2)) {
for (col in colnames(ds_cor2)) {
# Check if the partial correlation is greater than 0.5 or less than -0.5
if (ds_cor2[row, col] > 0.5 | ds_cor2[row, col] < -0.5) {
# Create a new row with the feature names and correlation value
new_row <- c(row, col, ds_cor2[row, col])
# Append the new row to the 'partial_corr_cat_dataframe'
ds_cor2_df <- rbind(ds_cor2_df, new_row)
}
}
}
# Set appropriate column names for the result dataframe
colnames(ds_cor2_df)= c("Feature1", "Feature2", "CorrelationValue")
# delete correlation value for feature with themselves
ds_cor2_df = ds_cor2_df[ds_cor2_df$Feature1 != ds_cor2_df$Feature2,]
ds_cor2_df <- ds_cor2_df[!duplicated(ds_cor2_df$CorrelationValue), ]
# Print the resulting dataframe (only the head)
print(ds_cor2_df)
a = c(1,2,3,4,5,6)
a = c(1,2,3,4,5,6)
a[2:4]
a[-(2:4)]
a[c(1,5)]
a[c(1,3)]
a[c(1,5)]
a[c(1,7)]
a[c(1,6)]
a[c(1,5)]
a[a==5]
a[a==2]
a[a==7]
a[a==9]
a[a==1]
a[a %in%  c(1, 2, 5)]
a['mela']
a = c(1,2,3,4,5,6,'mela')
a = c(1,2,3,4,5,6,'mela')
a['mela']
a['mela']
a = c(1,2,3,4,5,6,'mela')
a['mela']
# Energy Data Business Project
# Project Members: Esteban Ortega Dominguez, Mattia Varagnolo, Sofia Pope Trogu
# 2023-2024
# R Libraries
library(ggplot2)
library(dplyr)
# model libraries
library(lmtest)
library(forecast)
library(DIMORA)
library(fpp2)
library(graphics)
library(prophet)
library(lubridate)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
setwd("C:/Users/matti/Documents")
# Energy Data Business Project
# Project Members: Esteban Ortega Dominguez, Mattia Varagnolo, Sofia Pope Trogu
# 2023-2024
# R Libraries
library(ggplot2)
library(dplyr)
# model libraries
library(lmtest)
library(forecast)
library(DIMORA)
library(fpp2)
library(graphics)
library(prophet)
library(lubridate)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
setwd("C:/Users/matti/Documents")
setwd("C:/Users/matti/Documents")
setwd("C:/Users/matti/Documents/GitHub/business_data")
library(ggplot2)
library(dplyr)
# model libraries
library(lmtest)
library(forecast)
library(DIMORA)
library(fpp2)
library(graphics)
library(prophet)
library(lubridate)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
# Explore data structure and summary
str(data)
summary(data)
# Convert DATE to Date type
data$DATE <- as.Date(data$DATE, format = "%d/%m/%Y")
str(data)
head(data)
# Add total generation columns
library(ggplot2)
library(dplyr)
# model libraries
library(lmtest)
library(forecast)
library(DIMORA)
library(fpp2)
library(graphics)
library(prophet)
library(lubridate)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
# Explore data structure and summary
str(data)
summary(data)
# Convert DATE to Date type
data$DATE <- as.Date(data$DATE, format = "%d/%m/%Y")
str(data)
head(data)
# Add total generation columns
GBM(data)
# Initialize an empty data frame for numerical columns
numerical_data <- data.frame()
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
GBM(numerical_data)
GBM(numerical_data$Price_total)
GBM(numerical_data$Price_total, nshock = 4)
GBM(numerical_data$Price_total, nshock = 3)
GBM(numerical_data$Price_total, nshock = 2)
GBM(numerical_data$Price_total, nshock = 1)
GBM(numerical_data$Price_total, nshock = 0)
GBM(numerical_data$Price_total, shock= 'mixed', nshock = 4)
GBM(numerical_data$Price_total, shock= 'mixed', nshock = 3)
GBM(numerical_data$Price_total, shock= 'mixed', nshock = 2)
GBM(numerical_data$Price_total, shock= 'mixed', nshock = 1)
autoplot(data)
autoplot(data$Price_total)
mod_lm = gam(Customers_total ~ Price_total, data=data)
mod_lm = GAM(Customers_total ~ Price_total, data=data)
mod_lm = GLM(Customers_total ~ Price_total, data=data)
mod_lm = glm(Customers_total ~ Price_total, data=data)
library(mgcv)
mod_lm = gam(Customers_total ~ Price_total, data=data)
summary(mod_lm)
mod_gam1 = gam(Customers_total ~ s(Price_total, bs='cr'), data=data)
summary(mod_gam1)
plot(mod_gam1)
AIC(mod_lm)
summary(mod_lm)$sp.criterion
summary(mod_lm)$r.sq
summary(mod_gam1)$sp.criterion
summary(mod_gam1)$r.sq
anova(mod_lm, mod_gam1, test='Chisq')
mod_lm = gam(Price_total ~ Customers_total, data=data)
summary(mod_lm)
mod_gam1 = gam(Price_total ~ s(Customers_total, bs='cr'), data=data)
summary(mod_gam1)
plot(mod_gam1)
AIC(mod_lm)
View(data)
mod_lm2 = gam(Price_total ~ Customers_total + t_avg + prcp, data=data)
mod_lm2 = gam(Price_total ~ Customers_total + tavg + prcp, data=data)
summary(mod_lm2)
mod_lm2 = gam(Price_total ~ Customers_total + tavg + tmin, data=data)
summary(mod_lm2)
mod_lm2 = gam(Price_total ~ Customers_total + tavg, data=data)
summary(mod_lm2)
mod_lm2 = gam(Price_total ~ Customers_total + tmax + tmin , data=data)
summary(mod_lm2)
mod_lm2 = gam(Price_total ~ Customers_total + tmin , data=data)
summary(mod_lm2)
mod_lm2 = gam(Price_total ~ Customers_total + tavg , data=data)
summary(mod_lm2)
mod_gam2= gam(Price_total ~ Customers_total + tavg, data=data)
summary(mod_gam2)
mod_gam2= gam(Price_total ~ s(Customers_total) + s(tavg), data=data)
summary(mod_gam2)
mod_gam2= gam(Price_total ~ s(Customers_total) + s(tavg) +s(prcp), data=data)
summary(mod_gam2)
mod_lm2 = gam(Price_total ~ Customers_total + tavg + prcp , data=data)
summary(mod_lm2)
mod_gam2= gam(Price_total ~ s(Customers_total) + s(tavg) +s(prcp), data=data)
summary(mod_gam2)
plot(ggeffects::ggpredict(mod_gam2), facets = TRUE)
library(ggeffects)
install.packages("ggeffects")
plot(ggeffects::ggpredict(mod_gam2), facets = TRUE)
gratia::draw(mod_gam2)
install.packages("gratia")
library(gratia)
gratia::draw(mod_gam2)
mod_gamdef = gam(Price_total, data=data)
mod_gamdef = gam(data$Price_total, data=data)
mod_gamdef = gam(Price_total ~ c(names(data), data=data)
mod_gamdef = gam(Price_total ~ c(names(data)), data=data)
mod_gamdef = gam(Price_total ~ c(names(data)), data=data)
mod_gamdef = gam(Price_total ~ ., data=data)
mod_gamdef = lm(Price_total ~ ., data=data)
summary(mod_gamdef)
# Initialize an empty data frame for numerical columns
numerical_data <- data.frame()
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Set a seed for reproducibility
set.seed(123)
# Create an index for splitting the data into training and testing sets
index <- sample(seq_len(nrow(numerical_data)), size = 0.8 * nrow(numerical_data))
# Create the training set
train_set <- numerical_data[index, ]
# Create the testing set
test_set <- numerical_data[-index, ]
mod_gamdef = lm(Price_total ~ ., data=train_set)
summary(mod_gamdef)
# Make predictions on the test set
predictions <- predict(mod_gamdef, newdata = test_set)
# Compare predicted values with actual values
comparison <- data.frame(Actual = test_set$Price_total, Predicted = predictions)
# Print the comparison
print(comparison)
# Compute Mean Absolute Error (MAE)
mae <- mean(abs(comparison$Actual - comparison$Predicted))
# Print the MAE
print(paste("Mean Absolute Error (MAE):", mae))
# Assuming your MAE is stored in the variable 'mae'
mape <- mean(abs(comparison$Actual - comparison$Predicted) / comparison$Actual) * 100
# Print the MAPE
print(paste("Mean Absolute Percentage Error (MAPE):", mape))
mod_tslm = tslm(Price_total ~ Customers_total + tavg+ prcp, data=data)
mod_tslm = tslm(Price_total ~ Customers_total + tavg+ prcp, data=numerical_data)
summary(mod_tslm)
mod_tslm = tslm(Price_total ~ Customers_total + tavg+ prcp, data=data)
View(data)
mod_tslm = tslm(Price_total ~ Customers_total + tavg+ prcp+data$DATE)
mod_tslm = tslm(Price_total ~ Customers_total + tavg+ prcp+data$DATE, data = data)
mod_tslm = tslm(Price_total ~ trend+season+data$Customers_total)
mod_tslm = tslm(Price_total ~ trend+season+data$Customers_total, data=data)
