summary(studentInfo$imd_band)
levels(studentInfo$imd_band) == "character(0)"
levels(studentInfo$imd_band) == ""
recode(studentInfo$imd_band, "" = "NULL", .default = levels(studentInfo$imd_band))
recode(studentInfo$imd_band, "character(0)" = "NULL", .default = levels(studentInfo$imd_band))
summary(studentInfo$imd_band)
recode(studentInfo$imd_band, "" = "NULL", .default = levels(studentInfo$imd_band))
recode(studentInfo$imd_band, " " = "NULL", .default = levels(studentInfo$imd_band))
recode(studentInfo$imd_band, "" = "NULL", .default = levels(studentInfo$imd_band))
studentInfo$imd_band[lengths(studentInfo$imd_band) == 0]
studentInfo$imd_band[lengths(studentInfo$imd_band) == 0]
studentInfo$imd_band[lengths(studentInfo$imd_band) == 0] <- 'NULL'
levels(studentInfo$imd_band)
studentInfo$imd_band[length(studentInfo$imd_band) == 0]
studentInfo$imd_band[length(studentInfo$imd_band) == 0,]
studentInfo$imd_band
studentInfo$imd_band == legnth("")
studentInfo$imd_band == length("")
studentInfo$imd_band == ""
studentInfo$imd_band[studentInfo$imd_band == ""]
studentInfo$imd_band[studentInfo$imd_band == ""] <- 'NULL'
studentInfo$imd_band[studentInfo$imd_band == ""] <- 'NA'
levels(studentInfo$imd_band)
studentInfo$imd_band[studentInfo$imd_band == ""] <- 'hello world'
as.character(studentInfo$imd_band[studentInfo$imd_band == ""]) <- 'hello world'
as.character(studentInfo$imd_band[studentInfo$imd_band == ""]) <- 'hello world'
as.character(studentInfo$imd_band) <- 'hello world'
as.character(studentInfo$imd_band)
factor(as.character(studentInfo$imd_band))
levels(factor(as.character(studentInfo$imd_band)))
levels(factor(as.character(studentInfo$imd_band)), exclude = NULL)
levels(factor(as.character(studentInfo$imd_band), exclude = NULL))
summary(levels(factor(as.character(studentInfo$imd_band), exclude = NULL)))
summary(factor(as.character(studentInfo$imd_band), exclude = NULL))
studentInfo$imd_band <- factor(as.character(studentInfo$imd_band), exclude = NULL)
summary(studentInfo$imd_band)
data %>%
group_by(assessment_type) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') %>%
arrange(desc(total_count))
summary(data$imd_band)
data$imd_band_enc <- as.integer(factor(data$imd_band))
summary(data$imd_band_enc)
summary(data$imd_band)
data$imd_band_enc <- as.integer(factor(data$imd_band))
print_info(data$imd_band_enc)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
na_strings <- c("", "NA")
# load our tables into data frames and categorical as factors
assessments <- read.csv("Dataset/assessments.csv", stringsAsFactors=TRUE)
courses <- read.csv("Dataset/courses.csv", stringsAsFactors=TRUE)
studentAssessment <- read.csv("Dataset/studentAssessment.csv", stringsAsFactors=TRUE)
studentInfo <- read.csv("Dataset/studentInfo.csv", stringsAsFactors=TRUE, na.strings = na_strings)
studentRegistration <- read.csv("Dataset/studentRegistration.csv", stringsAsFactors=TRUE)
studentVle <- read.csv("Dataset/studentVle.csv", stringsAsFactors=TRUE)
vle <- read.csv("Dataset/vle.csv", stringsAsFactors=TRUE)
# Function to print info from DF easily
print_info <- function(df){
print(deparse(substitute(df)))
cat("\n")
cat("Structure of dataframe:", "\n")
print(str(df))
cat("\n")
cat("Summary for dataframe:","\n")
print(summary(df))
cat("\n")
}
ints_to_factors <- function(df){
if ('id_student' %in% names(df)) {
df$id_student <- factor(df$id_student)
}
if ('id_assessment' %in% names(df)) {
df$id_assessment <- factor(df$id_assessment)
}
if ('id_site' %in% names(df)) {
df$id_site <- factor(df$id_site)
}
return(df)
}
# convert additional factors that we want
assessments <- ints_to_factors(assessments)
courses <- ints_to_factors(courses)
studentAssessment <- ints_to_factors(studentAssessment)
studentInfo <- ints_to_factors(studentInfo)
studentRegistration <- ints_to_factors(studentRegistration)
studentVle <- ints_to_factors(studentVle)
vle <- ints_to_factors(vle)
print_info(assessments)
print_info(courses)
print_info(studentAssessment)
print_info(studentInfo)
print_info(studentRegistration)
print_info(studentVle)
print_info(vle)
# merge tables to get more info
df_nas_scores <- merge(assessments, studentAssessment[is.na(studentAssessment$score),], by= 'id_assessment')
df_nas_scores_studentinfo <- merge(studentInfo, df_nas_scores, by= 'id_student')
print_info(df_nas_scores_studentinfo)
studentAssessment <- na.omit(studentAssessment)
# we now see that we have no NAs in score
summary(studentAssessment)
print_info(studentInfo)
studentInfo %>%
group_by(imd_band) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') #%>%
#arrange(desc(total_count))
# calculate the mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(studentInfo$imd_band)
studentInfo$imd_band <- factor(as.character(studentInfo$imd_band), exclude = NULL)
summary(studentInfo$imd_band)
head(studentVle)
studentVle_tot <- studentVle %>%
group_by(code_presentation, code_module, id_student) %>%
# group by so we can fit to the student info table
summarise(total_sum_click = sum(sum_click), .groups = 'drop')
head(studentVle_tot)
studentInfo %>%
group_by(code_presentation, code_module, id_student) %>%
summarise(total_count=n(), .groups = 'drop') %>%
arrange(desc(total_count))
assessments %>%
group_by(assessment_type) %>%
summarise(total_count=n(), .groups = 'drop') %>%
arrange(desc(total_count))
assessments_merged <- merge(studentAssessment,
assessments,
by = "id_assessment")
head(assessments_merged)
print_info(assessments_merged)
head(studentInfo)
# merge studentInfo and assessments_merged
studentInfo_assessment = merge(studentInfo, assessments_merged, by=c('id_student',
'code_module',
'code_presentation'))
# merge studentInfo_assessment and sudentVle_total
studentInfo_merged = merge(studentInfo_assessment, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
# this will be our data
data <- studentInfo_merged
print_info(data)
summary(data$imd_band)
data$imd_band_enc <- as.integer(factor(data$imd_band))
print_info(data$imd_band_enc)
data %>%
group_by(assessment_type) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') %>%
arrange(desc(total_count))
summary(data$imd_band)
data$imd_band_enc <- as.integer(factor(data$imd_band))
print_info(factor(data$imd_band_enc))
library(tidyverse)
head(assessments)
knitr::opts_chunk$set(echo = TRUE)
assessments %>%
group_by(code_module, code_presentation, assessment_type ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type != 'Exam',]
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
data %>%
group_by(id_student, code_module, code_presentation, assessment_type) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') %>%
arrange(desc(total_count))
data %>%
group_by(id_student, code_module, code_presentation, assessment_type) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') %>%
arrange(desc(id_student))
data[id_student == 2697181, ]
data[data$id_student == 2697181, ]
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
data[data$assessment_type=='Exam',] %>%
group_by(id_student, code_module, code_presentation, assessment_type) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') %>%
arrange(desc(id_student))
dim(studentInfo)
summary(studentInfo)
print_info(studentInfo)
print_info(data[data$assessment_type == 'Exam',])
print_info(data[data$final_result != 'Withdrawn',])
View(assesments_merged)
assessments_merged_all <- merge(studentAssessment,
assessments,
by = "id_assessment",
all=TRUE)
print_info(assessments_merged_all)
print_info(assessments_merged)
assessments_merged_all[assessments_merged_all$score == 'NA']
assessments_merged_all[assessments_merged_all$score == 'NA',]
assessments_merged_all[is.na(assessments_merged_all$score),]
assessments %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep'
assessments %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation, assessment_type ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type== 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[is.na(assessments_merged_all$score),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[!is.na(assessments_merged_all$score),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[(is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments_merged_all[(is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments_merged_all[(is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type  ) %>%
summarise(count_rows = n(), .groups = 'keep')
head(assessments)
assessments[assessments$assessment_type== 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type, id_assessment ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments_merged_all[(is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type, id_assessment) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type, id_assessment) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
head(assessments)
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation, id_assessment) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation, id_assessment ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type, id_assessment ) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments[assessments$assessment_type != 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), .groups = 'keep')
assessments %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type, id_assessment) %>%
summarise(count_rows = n(), .groups = 'keep')
assessments[assessments$assessment_type == 'Exam', id_assessment] %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
assessments[assessments$assessment_type == 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type, id_assessment) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
courses
assessments[assessments$assessment_type == 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
assessments_merged_all <- merge(studentAssessment,
assessments,
by = "id_assessment",
all=TRUE)
print_info(assessments_merged_all)
assessments_merged_all[is.na(assessments_merged_all$score),]
summary(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam'])
summary(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam',])
structure(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam',])
structure(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam',])
dim(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam',])
# merge studentInfo and assessments_merged
studentInfo_assessment = merge(studentInfo, assessments_merged, by=c('id_student',
'code_module',
'code_presentation'))
# merge studentInfo_assessment and sudentVle_total
data_assessments = merge(studentInfo_assessment, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
data_assessments <- data_assessments[data_assessments$assessment_type == 'Exam', ]
print_info(data_assessments)
# merge studentInfo_assessment and sudentVle_total
data_exam = merge(studentInfo_assessment, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
data_exam <- data_exam[data_assessments$assessment_type == 'Exam', ]
print_info(data_exam)
# merge studentInfo and assessments_merged
studentInfo_assessment = merge(studentInfo, assessments_merged, by=c('id_student',
'code_module',
'code_presentation'))
# merge studentInfo_assessment and sudentVle_total
data_exam = merge(studentInfo_assessment, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
data_exam <- data_exam[data_exam$assessment_type == 'Exam', ]
print_info(data_exam)
data_exam %>%
group_by(id_student, code_module, code_presentation) %>%
summarise(count = n(), .groups = 'keep')
data_exam %>%
group_by(id_student, code_module, code_presentation) %>%
summarise(count = n(), .groups = 'keep') %>%
desc(count)
data_exam %>%
group_by(id_student, code_module, code_presentation) %>%
summarise(count = n(), .groups = 'keep') %>%
arrange(desc(count))
summary(studentInfo$imd_band)
studentInfo$imd_band_enc <- as.integer(factor(studentInfo$imd_band))
print_info(factor(studentInfo$imd_band_enc))
studentInfo$imd_band_enc <- as.integer(factor(studentInfo$imd_band))
print_info(factor(studentInfo$imd_band_enc))
summary(studentInfo$imd_band)
studentInfo$imd_band_enc <- as.integer(factor(studentInfo$imd_band))
print_info(factor(studentInfo$imd_band_enc))
print_info(data_students)
data_students = merge(studentInfo, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
print_info(data_students)
sumamry(data_exam$imd_band)
summary(data_exam$imd_band)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# na_strings <- c("", "NA")
# load our tables into data frames and categorical as factors
assessments <- read.csv("Dataset/assessments.csv", stringsAsFactors=TRUE)
courses <- read.csv("Dataset/courses.csv", stringsAsFactors=TRUE)
studentAssessment <- read.csv("Dataset/studentAssessment.csv", stringsAsFactors=TRUE)
studentInfo <- read.csv("Dataset/studentInfo.csv", stringsAsFactors=TRUE)
studentRegistration <- read.csv("Dataset/studentRegistration.csv", stringsAsFactors=TRUE)
studentVle <- read.csv("Dataset/studentVle.csv", stringsAsFactors=TRUE)
vle <- read.csv("Dataset/vle.csv", stringsAsFactors=TRUE)
print_info <- function(df){
print(deparse(substitute(df)))
cat("\n")
cat("Structure of dataframe:", "\n")
print(str(df))
cat("\n")
cat("Summary for dataframe:","\n")
print(summary(df))
cat("\n")
}
ints_to_factors <- function(df){
if ('id_student' %in% names(df)) {
df$id_student <- factor(df$id_student)
}
if ('id_assessment' %in% names(df)) {
df$id_assessment <- factor(df$id_assessment)
}
if ('id_site' %in% names(df)) {
df$id_site <- factor(df$id_site)
}
return(df)
}
# convert additional factors that we want
assessments <- ints_to_factors(assessments)
courses <- ints_to_factors(courses)
studentAssessment <- ints_to_factors(studentAssessment)
studentInfo <- ints_to_factors(studentInfo)
studentRegistration <- ints_to_factors(studentRegistration)
studentVle <- ints_to_factors(studentVle)
vle <- ints_to_factors(vle)
print_info(assessments)
print_info(courses)
print_info(studentAssessment)
print_info(studentInfo)
print_info(studentRegistration)
print_info(studentVle)
print_info(vle)
# merge tables to get more info
df_nas_scores <- merge(assessments, studentAssessment[is.na(studentAssessment$score),], by= 'id_assessment')
df_nas_scores_studentinfo <- merge(studentInfo, df_nas_scores, by= 'id_student')
print_info(df_nas_scores_studentinfo)
studentAssessment <- na.omit(studentAssessment)
# we now see that we have no NAs in score
summary(studentAssessment)
print_info(studentInfo)
studentInfo %>%
group_by(imd_band) %>%
summarise(total_count = n(), total_count_percent = round(n() / nrow(.) * 100, digits = 2), .groups = 'keep') #%>%
#arrange(desc(total_count))
# calculate the mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(studentInfo$imd_band)
# before the encoding:
summary(studentInfo$imd_band)
# encoding
studentInfo$imd_band_enc <- as.integer(factor(studentInfo$imd_band))
# after the encoding:
print_info(factor(studentInfo$imd_band_enc))
head(studentVle)
studentVle_tot <- studentVle %>%
group_by(code_presentation, code_module, id_student) %>%
# group by so we can fit to the student info table
summarise(total_sum_click = sum(sum_click), .groups = 'drop')
head(studentVle_tot)
studentInfo %>%
group_by(code_presentation, code_module, id_student) %>%
summarise(total_count=n(), .groups = 'drop') %>%
arrange(desc(total_count))
assessments %>%
group_by(assessment_type) %>%
summarise(total_count=n(), .groups = 'drop') %>%
arrange(desc(total_count))
courses
assessments %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
assessments[assessments$assessment_type == 'Exam',] %>%
group_by(code_module, code_presentation, assessment_type) %>%
summarise(sum_weight = sum(weight), number_ass = n(), .groups = 'keep')
assessments_merged_all <- merge(studentAssessment,
assessments,
by = "id_assessment",
all=TRUE)
print_info(assessments_merged_all)
assessments_merged_all[(!is.na(assessments_merged_all$score) & assessments_merged_all$assessment_type == 'Exam'),]%>%
group_by(code_module, code_presentation, assessment_type, id_assessment) %>%
summarise(count_rows = n(), .groups = 'keep')
dim(assessments_merged_all[assessments_merged_all$assessment_type == 'Exam',])
assessments_merged <- merge(studentAssessment,
assessments,
by = "id_assessment")
head(assessments_merged)
print_info(assessments_merged)
head(studentInfo)
# merge studentInfo and assessments_merged
studentInfo_assessment = merge(studentInfo, assessments_merged, by=c('id_student',
'code_module',
'code_presentation'))
# merge studentInfo_assessment and sudentVle_total
data_exam = merge(studentInfo_assessment, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
data_exam <- data_exam[data_exam$assessment_type == 'Exam', ]
print_info(data_exam)
data_exam %>%
group_by(id_student, code_module, code_presentation) %>%
summarise(count = n(), .groups = 'keep') %>%
arrange(desc(count))
data_students = merge(studentInfo, studentVle_tot, by=c('id_student',
'code_module',
'code_presentation'))
print_info(data_students)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(gridExtra)
library(truncnorm)
library(forcats)
library(glmnet)
library(broom)
library(caret)
library(leaps)
library(MASS)
library(e1071)
library(pROC)
library(class)
library(car)
#library(kableExtra)
assessments <- read.csv("Dataset/assessments.csv", stringsAsFactors=TRUE)
courses <- read.csv("Dataset/courses.csv", stringsAsFactors=TRUE)
studentAssessment <- read.csv("Dataset/studentAssessment.csv", stringsAsFactors=TRUE)
studentInfo <- read.csv("Dataset/studentInfo.csv", stringsAsFactors=TRUE)
studentRegistration <- read.csv("Dataset/studentRegistration.csv", stringsAsFactors=TRUE)
studentVle <- read.csv("Dataset/studentVle.csv", stringsAsFactors=TRUE)
vle <- read.csv("Dataset/vle.csv", stringsAsFactors=TRUE)
summary(vle)
vle.head()
head(vle)
vle
summary(vle)
setwd("~/GitHub/business/business_data")
