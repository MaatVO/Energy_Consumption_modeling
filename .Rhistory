scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1000000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 10000000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1000000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 2000000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1500000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1500000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 10000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1500000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 20000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1500000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 200000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
ggplot(avg_sales_month, aes(x = factor(month), y = avg_sales, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Sales", fill = "Sales") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = "#3e6fff"), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 1500000), breaks = seq(0, max(avg_sales_month$avg_sales) + 10000, by = 100000)) +
geom_text(data = filter(avg_sales_month, month == "lug"),
aes(x = month, y = avg_sales, label = round(avg_sales)),
vjust = -0.5, color = "black", size = 6)
acf(avg_sales_month)
acf(avg_sales_month$avg_sales)
acf(data$Sales_total, main='Autocorrelation for sales')
acf(data$total_generation_source)
acf(data$Solar.Thermal.and.Photovoltaic)
acf(data$Sales_transportation)
acf(data$Sales_residential)
acf(data$Sales_transportation)
View(data)
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(data$Sales_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(data$Sales_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(data$Price_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
scale_y_continuous(limits = c(0, max(data$Price_total), by=2) +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30 by=2) +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30, by=2) +
ggplot(data, aes(x = DATE, y = Price_total)) +
labs(x = "Date", y = "Price", title = "Price over time") +
)
ggplot(data, aes(x = DATE, y = Price_total)) +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
acf(data$Sales_total, main='Autocorrelation for sales')
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30, by=2) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
)
))
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30, by=2)) +
)
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30, by=2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,30, by=2))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,max(data$Price_total), by=2))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total), breaks=seq(0,max(data$Price_total), by=2))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
acf(data$Price_total)
acf(data$Price_total)
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'red') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'green') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2021-01-01")), linetype='dashed',color='blue')+
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2021-01-01")), linetype='dashed',color='blue')+
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2021-01-01")), linetype='dashed',color='blue')+
labs(x = "Date", y = "Price", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
cor(data)
########################### Correlation matrices
# excluding non-numerical data from the dataset
for i in data:
########################### Correlation matrices
# excluding non-numerical data from the dataset
for i in data:
########################### Correlation matrices
# excluding non-numerical data from the dataset
for i in data
}
print(i)
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in data$Combined.Heat.and.Power..Commercial.Power) {
print(i)
}
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in data.columns) {
print(i)
}
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in data.column) {
print(i)
}
print(i)
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in names(data) ) {
print(i)
}
print(j)
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in names(data) ) {
for j in data$i {
for (j in data$i) {
print(j)
}
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in names(data) ) {
for (j in data$i) {
print(j)
}
}
)
########################### Correlation matrices
# excluding non-numerical data from the dataset
for (i in names(data) ) {
for (j in data$i) {
print(j)
}
}
for (i in names(data) ) {
for (j in data$i) {
print(j)
}
}
# Initialize an empty data frame for numerical columns
numerical_data <- data.frame()
# Loop through column names
for (col_name in names(data)) {
# Check if the column has numerical values
if (is.numeric(data[[col_name]])) {
# If yes, add it to the new data frame
numerical_data[[col_name]] <- data[[col_name]]
}
}
numerical_data <- data.frame()
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Print the new data frame with numerical columns
print(numerical_data)
cor(numerical_data)
cor_matrix = cor(numerical_data)
library(corrplot)
install.packages("corrplot")
cor_matrix = cor(numerical_data)
library(corrplot)
color_palette = colorRampPalette(c("#BB4444","#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(cor_matrix, method = "color", col = color_palette(200), type = "upper", order = "hclust",
addrect = 2, tl.col = "black", tl.srt = 45, diag = FALSE)
corrplot(cor_matrix, method = "circle", tl.cex = 0.7, cl.cex = 0.7)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.7)
corrplot(cor_matrix, method = "number", tl.cex = 1, cl.cex = 0.7)
corrplot(cor_matrix, method = "number", tl.cex = 0.3, cl.cex = 0.7)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.4)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.2)
color_palette = colorRampPalette(c("#BB4444","#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.2)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.1)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.01)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 1)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.5)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.5)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.4)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.2)
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.3)
# Function to filter correlated values and create a list
filter_correlation <- function(cor_matrix, threshold = 0.5) {
correlated_list <- list()
for (col in colnames(cor_matrix)) {
correlated_cols <- colnames(cor_matrix)[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold]
correlated_list[[col]] <- correlated_cols[correlated_cols != col]  # Exclude self-correlation
}
return(correlated_list)
}
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated labels for each variable
correlated_labels <- filter_correlation(filtered_cor_matrix)
# Print the list
print(correlated_labels)
# Function to filter correlated values and create a list of tuples
filter_correlation <- function(cor_matrix, threshold = 0.5) {
correlated_list <- list()
for (col in colnames(cor_matrix)) {
correlated_cols <- colnames(cor_matrix)[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold]
correlated_tuples <- data.frame(label = correlated_cols[correlated_cols != col],
correlation = cor_matrix[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold, col])
correlated_list[[col]] <- as.list(correlated_tuples)
}
return(correlated_list)
}
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated tuples for each variable
correlated_tuples <- filter_correlation(filtered_cor_matrix)
# Print the list of correlated tuples
print(correlated_tuples)
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated tuples for each variable
correlated_tuples <- filter_correlation(filtered_cor_matrix)
# Function to filter correlated values and create a list of tuples
filter_correlation <- function(cor_matrix, threshold = 0.5) {
correlated_list <- list()
for (col in colnames(cor_matrix)) {
correlated_cols <- colnames(cor_matrix)[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold]
correlated_tuples <- data.frame(label = character(0), correlation = numeric(0), stringsAsFactors = FALSE)
for (cor_col in correlated_cols) {
correlation_value <- cor_matrix[cor_col, col]
correlated_tuples <- rbind(correlated_tuples, list(label = cor_col, correlation = correlation_value))
}
correlated_list[[col]] <- as.list(correlated_tuples)
}
return(correlated_list)
}
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated tuples for each variable
correlated_tuples <- filter_correlation(filtered_cor_matrix)
# Print the list of correlated tuples
print(correlated_tuples)
