---
title: "Business project: energy price forecasting"
library(tinytex)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
library(dplyr)
# to read the excel files
library(readxl)
# Specify the path to your Excel file
excel_file_path <- "data/generation_monthly.xlsx"
column_names <- c("year", "month", "state", "type_of_producer", "energy_source", "generation_mwh")
generation_data <- data.frame()
# Get the list of sheet names in the Excel file
sheet_names <- excel_sheets(excel_file_path)
# Loop through each sheet
for (sheet_name in sheet_names) {
# Read data from the current sheet, starting from the third row
data <- read_excel(excel_file_path, sheet = sheet_name, skip = 1)
colnames(data) <- column_names
# Combine the data into the 'generation_data' dataframe
generation_data <- bind_rows(generation_data, data)}
head(generation_data)
#Convert chars to factors
convert_chars_to_factors <- function(df) {
for (col in names(df)) {
if (is.character(df[[col]])) {
df[[col]] <- factor(df[[col]])
}
}
return(df)
}
generation_data <- convert_chars_to_factors(generation_data)
generation_data$month <- factor(generation_data$month)
generation_data$year <- factor(generation_data$year)
# Create date column
generation_data$date <- as.Date(paste(generation_data$year, generation_data$month, "01", sep = "-"))
#generation_data$date <- factor(generation_data$date)
```
# Create date column
generation_data$date <- as.Date(paste(generation_data$year, generation_data$month, "01", sep = "-"))
#generation_data$date <- factor(generation_data$date)
summary(generation_data)
str(generation_data)
ggplot(data = generation_data, mapping = aes(x = date, y = generation_mwh))+
geom_point()
```{r}
str(generation_data, '.')
```{r}
```{r}
```{r}
library(readr)
```{r}
```{r}
write_csv(generation_data, "C:\\Users\matti\Documents\GitHub\business_data\data")
write_csv(generation_data, "C:\\Users\matti\Documents\GitHub\business_data\data\data.csv")
write_csv(generation_data, "C:\\Users\matti\Documents\GitHub\business_data\data\data.csv")
write_csv(generation_data,'data.csv')
plot_data <- generation_data %>%
group_by(date, energy_source) %>%
summarise(gen_by_energy = sum(generation_mwh))
plot_data <- generation_data %>%
group_by(date, energy_source) %>%
summarise(gen_by_energy = sum(generation_mwh))
plot_data
ggplot(data = plot_data, aes(x = date, y = gen_by_energy, color= energy_source)) +
geom_point()
summary(df)
df <- generation_data %>% filter(state == "DC")
summary(df)
write_csv(df, 'df.csv')
ggplot(data = df, mapping = aes(x = date, y = generation_mwh))+
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
library(dplyr)
# to read the excel files
library(readxl)
library(readr)
# Specify the path to your Excel file
excel_file_path <- "data/generation_monthly.xlsx"
column_names <- c("year", "month", "state", "type_of_producer", "energy_source", "generation_mwh")
generation_data <- data.frame()
# Get the list of sheet names in the Excel file
sheet_names <- excel_sheets(excel_file_path)
# Loop through each sheet
for (sheet_name in sheet_names) {
# Read data from the current sheet, starting from the third row
data <- read_excel(excel_file_path, sheet = sheet_name, skip = 1)
colnames(data) <- column_names
# Combine the data into the 'generation_data' dataframe
generation_data <- bind_rows(generation_data, data)}
head(generation_data)
#Convert chars to factors
convert_chars_to_factors <- function(df) {
for (col in names(df)) {
if (is.character(df[[col]])) {
df[[col]] <- factor(df[[col]])
}
}
return(df)
}
generation_data <- convert_chars_to_factors(generation_data)
generation_data$month <- factor(generation_data$month)
generation_data$year <- factor(generation_data$year)
# Create date column
generation_data$date <- as.Date(paste(generation_data$year, generation_data$month, "01", sep = "-"))
#generation_data$date <- factor(generation_data$date)
summary(generation_data)
str(generation_data)
df <- generation_data %>% filter(state == "DC")
summary(df)
write_csv(df, 'df.csv')
write_csv(generation_data,'data.csv')
ggplot(data = df, mapping = aes(x = date, y = generation_mwh))+
geom_point()
plot_data <- generation_data %>%
group_by(date, energy_source) %>%
summarise(gen_by_energy = sum(generation_mwh))
plot_data
ggplot(data = plot_data, aes(x = date, y = gen_by_energy, color= energy_source)) +
geom_point()
library(ggplot2)
library(dplyr)
# model libraries
library(lmtest)
library(forecast)
library(DIMORA)
library(fpp2)
library(graphics)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
setwd("~/GitHub/business_data")
# Explore data structure and summary
str(data)
summary(data)
# Convert DATE to Date type
data$DATE <- as.Date(data$DATE, format = "%d/%m/%Y")
# Convert DATE to Date type
data$DATE <- as.Date(data$DATE, format = "%d/%m/%Y")
# Plot data
##Identify Date variable
year_month <- data$DATE
# Explore data structure and summary
str(data)
summary(data)
# read data
data <- read.csv("data/energy_data.csv", sep = ';', dec = '.')
# Explore data structure and summary
str(data)
summary(data)
# Convert DATE to Date type
data$DATE <- as.Date(data$DATE, format = "%d/%m/%Y")
# Plot data
##Identify Date variable
year_month <- data$DATE
##create variable for generation_mwh
gmwh <- data$generation_mwh
##make a plot
plot(year_month, gmwh, xlab="Year-Month", ylab="Energy Generation")
# Plot time series for Petroleum with custom y-axis labels
plot(data$DATE, data$Solar.Thermal.and.Photovoltaic, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Petroleum Generation", ylim = c(0, 5000))
# Customize y-axis labels
axis(side = 2, at = seq(0, 60000, by = 10000), labels = seq(0, 60000, by = 10000))
# Customize x-axys labels
axis.Date(side = 1, at = seq(as.Date("2001-01-01"), as.Date("2022-12-31"), by = "years"), format = "%Y", las = 2)
# Plot time series for Solat, thermal and photovoltaic with custom y-axis labels
plot(data$DATE, data$Solar.Thermal.and.Photovoltaic, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Solar | Thermal | Photovoltaic Generation", ylim = c(0, 5000))
##Plot generation by energy source
plot_data <- generation_data %>%
group_by(date, energy_source) %>%
summarise(gen_by_energy = sum(generation_mwh))
Acf(gmwh)
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 5000))
# Customize y-axis labels
axis(side = 2, at = seq(0, 70000, by = 10000), labels = seq(0, 60000, by = 10000))
# Customize y-axis labels
axis(side = 2, at = seq(0, 70000, by = 10000), labels = seq(0, 70000, by = 10000))
# Customize y-axis labels
axis(side = 2, at = seq(0, 70000, by = 10000), labels = seq(0, 70000, by = 10000))
# Customize x-axys labels
axis.Date(side = 1, at = seq(as.Date("2001-01-01"), as.Date("2022-12-31"), by = "years"), format = "%Y", las = 2)
# Customize y-axis labels
axis(side = 2, at = seq(0, 70000, by = 10000), labels = seq(0, 70000, by = 10000))
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 7000))
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 8000))
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 10000))
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 11000))
# Plot time series for  with custom y-axis labels
plot(data$DATE, data$Natural.Gas, type = "b", xlab = "Date", ylab = "Petroleum Generation",
main = "Time Series of Natural Gas", ylim = c(0, 15000))
# Customize x-axys labels
axis.Date(side = 1, at = seq(as.Date("2001-01-01"), as.Date("2022-12-31"), by = "years"), format = "%Y", las = 2)
# Create a bar plot
ggplot(energy_data, aes(x = Source, y = Energy_Generated, fill = Source)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Energy Generation by Source",
x = "Energy Source",
y = "Energy Generated (units)") +
theme_minimal()
# Create a bar plot
ggplot(data, aes(x = Source, y = Energy_Generated, fill = Source)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Energy Generation by Source",
x = "Energy Source",
y = "Energy Generated (units)") +
theme_minimal()
print(colnames(data))
# Melt the data for ggplot
library(reshape2)
energy_data_melted <- melt(data, id.vars = "DATE")
# Create a bar plot
ggplot(energy_data_melted, aes(x = DATE, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
labs(title = "Energy Generation Over Time",
x = "Date",
y = "Energy Generated (units)",
fill = "Energy Source") +
theme_minimal()
energy_data_melted <- melt(data, id.vars = "DATE", measure.vars = c('Natural.Gas','Other.Biomass','Petroleum','Solar.Thermal.and.Photovoltaic'))
# Create a bar plot
ggplot(energy_data_melted, aes(x = DATE, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
labs(title = "Energy Generation Over Time",
x = "Date",
y = "Energy Generated (units)",
fill = "Energy Source") +
theme_minimal()
