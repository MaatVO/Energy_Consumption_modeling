theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 1000))+
geom_text(data = filter(post2011_avg_ren_data, month == "dec"),
aes(x = month, y = avg_generation, label = round(avg_generation)),
vjust = -0.5, color = "black", size = 6)
# Average monthly energy generation from solar
# solar data (starting in 2019)
solar_data <- subset(data, Solar.Thermal.and.Photovoltaic > 0)
avg_solar_data <- solar_data %>%
group_by(month) %>%
summarise(avg_generation = mean(Solar.Thermal.and.Photovoltaic, na.rm = TRUE)) %>%
mutate(highlight_flag = ifelse(avg_generation > 1600, TRUE, FALSE))
ggplot(avg_solar_data, aes(x = factor(month), y = avg_generation, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "Month", y = "Avg. Generation (MWh)", fill = "Renewables usage") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = '#3e6fff'), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 12000), breaks = seq(0, 12000, by = 2000))+
geom_text(data = filter(avg_solar_data, month == "mag"),
aes(x = month, y = avg_generation, label = round(avg_generation)),
vjust = -0.5, color = "black", size = 6)
gas_data <- subset(data, Natural.Gas > 0)
avg_gas_data <- gas_data %>%
group_by(month) %>%
summarise(avg_generation = mean(Natural.Gas, na.rm = TRUE)) %>%
mutate(highlight_flag = ifelse(avg_generation > 6500, TRUE, FALSE))
avg_gas_data$energysource = 'Gas'
ggplot(avg_gas_data, aes(x = factor(month), y = avg_generation, fill = as.character(highlight_flag))) +
geom_bar(stat = "identity", color = "darkblue")+
labs(x = "Month", y = "Avg. Generation (MWh)", fill = "Natural Gas usage") +
scale_fill_manual(values = c("FALSE" = "lightblue", "TRUE" = '#3e6fff'), labels = c('Normal', 'Highest')) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(hjust = 1, family = 'Helvetica Neue'),
title = element_text(face = 'bold')
) +
scale_y_continuous(limits = c(0, 12000), breaks = seq(0, 12000, by = 2000))+
geom_text(data = filter(avg_gas_data, month == "lug"),
aes(x = month, y = avg_generation, label = round(avg_generation)),
vjust = -0.5, color = "black", size = 6)
######################## COMBINED DATA PLOT
combined_data = rbind(avg_data, pre2011_avg_pet_data)
combined_data = rbind(combined_data, post2011_avg_ren_data)
combined_data = rbind(combined_data, avg_gas_data)
print(n=30, combined_data)
ggplot(combined_data,
aes(fill = energysource, y = avg_generation, x = month)) +
geom_bar(position = 'dodge', stat = 'identity') +
scale_fill_manual(values = c("All" = "white", "Petroleum" = "#6d93d1", "Renewables" = "#32558c", 'Gas'="#b1c3e0")) +
labs(
title = "Average Generation by Source",
x = "Month",
y = "Average Generation (MWh)",
fill = "Energy Source"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, family = 'Helvetica Neue'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", family = 'Helvetica Neue'),
axis.text.y = element_text(hjust = 1, family = 'Helvetica Neue')
) +
scale_y_continuous(limits = c(0, 40000), breaks = seq(0, 40000, by = 5000))
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
# Filter the dataset for rows where Petroleum is greater than 0
petroleum_data <- subset(data, Petroleum > 0)
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data.frame()
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Print the new data frame with numerical columns
print(numerical_data)
cor_matrix = cor(numerical_data)
library(corrplot)
color_palette = colorRampPalette(c("#BB4444","#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.3)
# Function to filter correlated values and create a list of tuples
filter_correlation <- function(cor_matrix, threshold = 0.5) {
correlated_list <- list()
for (col in colnames(cor_matrix)) {
correlated_cols <- colnames(cor_matrix)[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold]
correlated_tuples <- data.frame(label = character(0), correlation = numeric(0), stringsAsFactors = FALSE)
for (cor_col in correlated_cols) {
correlation_value <- cor_matrix[cor_col, col]
correlated_tuples <- rbind(correlated_tuples, list(label = cor_col, correlation = correlation_value))
}
correlated_list[[col]] <- as.list(correlated_tuples)
}
return(correlated_list)
}
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated tuples for each variable
correlated_tuples <- filter_correlation(filtered_cor_matrix)
# Print the list of correlated tuples
print(correlated_tuples)
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date(2012-01-01)]
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date('2012-01-01')]
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date('2012-01-01'),]
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date('2012-01-01'),]
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Print the new data frame with numerical columns
print(numerical_data)
print(numerical_data.head())
summary(numerical_data)
str(numerical_data)
########################### Correlation matrices
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date('2012-01-01'),]
str(numerical_data)
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Print the new data frame with numerical columns
print(numerical_data)
cor_matrix = cor(numerical_data)
library(corrplot)
color_palette = colorRampPalette(c("#BB4444","#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(cor_matrix, method = "number", tl.cex = 0.7, cl.cex = 0.8, number.cex = 0.3)
# Function to filter correlated values and create a list of tuples
filter_correlation <- function(cor_matrix, threshold = 0.5) {
correlated_list <- list()
for (col in colnames(cor_matrix)) {
correlated_cols <- colnames(cor_matrix)[cor_matrix[, col] > threshold | cor_matrix[, col] < -threshold]
correlated_tuples <- data.frame(label = character(0), correlation = numeric(0), stringsAsFactors = FALSE)
for (cor_col in correlated_cols) {
correlation_value <- cor_matrix[cor_col, col]
correlated_tuples <- rbind(correlated_tuples, list(label = cor_col, correlation = correlation_value))
}
correlated_list[[col]] <- as.list(correlated_tuples)
}
return(correlated_list)
}
# Filter correlation matrix for values > 0.5 or < -0.5
filtered_cor_matrix <- cor_matrix * (abs(cor_matrix) > 0.5)
# Create a list of correlated tuples for each variable
correlated_tuples <- filter_correlation(filtered_cor_matrix)
# Print the list of correlated tuples
print(correlated_tuples)
mod_gam1 = gam(Price_total ~ s(Biomass, bs='cr'), data=data)
mod_gam1 = gam(Price_total ~ s(Other.Biomass, bs='cr'), data=data)
summary(mod_gam1)
mod_gamdef = lm(Price_total ~ ., data=train_set)
summary(mod_gamdef)
# Initialize an empty data frame for numerical columns
numerical_data <- data[data$DATE >= as.Date('2012-01-01'),]
# Create a new data frame with only numerical columns
numerical_data <- data %>%
select_if(is.numeric)
# Set a seed for reproducibility
set.seed(123)
# Create an index for splitting the data into training and testing sets
index <- sample(seq_len(nrow(numerical_data)), size = 0.8 * nrow(numerical_data))
# Create the training set
train_set <- numerical_data[index, ]
# Create the testing set
test_set <- numerical_data[-index, ]
##################################### Linear Regression and GAM with 1 feature
library(mgcv)
mod_lm = gam(Price_total ~ Customers_total, data=data)
summary(mod_lm)
mod_gam1 = gam(Price_total ~ s(Other.Biomass, bs='cr'), data=data)
summary(mod_gam1)
plot(mod_gam1)
AIC(mod_lm)
summary(mod_lm)$sp.criterion
summary(mod_lm)$r.sq
summary(mod_gam1)$sp.criterion
summary(mod_gam1)$r.sq
anova(mod_lm, mod_gam1, test='Chisq')
mod_lm2 = gam(Price_total ~ Customers_total + tavg + prcp , data=data)
summary(mod_lm2)
mod_gam2= gam(Price_total ~ s(Customers_total) + s(tavg) +s(prcp), data=data)
summary(mod_gam2)
library(ggeffects)
library(gratia)
gratia::draw(mod_gam2)
mod_gamdef = lm(Price_total ~ ., data=train_set)
summary(mod_gamdef)
mod_tslm = tslm(Price_total ~ trend+season+data$Customers_total, data=data)
summary(mod_tslm)
mod_gamdef = lm(Price_total ~ ., data=train_set)
summary(mod_gamdef)
mod_tslm = tslm(Price_total ~ trend+season+data$Customers_total, data=data)
data.ts= ts(data, frequency = 1)
fit1 = tslm(data.ts ~ trend + season)
fit1 = tslm(data.ts ~ trend)
summary(fit1)
data.ts= ts(data$Price_total, frequency = 1)
fit1 = tslm(data.ts ~ trend)
summary(fit1)
plot(data.ts, type='l', xlab='month',ylab='price')
data.ts= ts(data$Price_total, frequency = 12)
fit1 = tslm(data.ts ~ trend)
summary(fit1)
plot(data.ts, type='l', xlab='month',ylab='price')
mod_tslm = tslm(Price_total ~ trend+season+data$Customers_total, data=data)
plot(data.ts, type='l', xlab='month',ylab='price')
data.ts= ts(data$Price_total, frequency = 1)
fit1 = tslm(data.ts ~ trend)
summary(fit1)
fit1 = tslm(data.ts ~ trend + season)
summary(fit1)
fit1 = tslm(data.ts ~ trend + season)
plot(res1, type='l', xlab='month',ylab='price')
# check residuals
res1=residuals(fit1)
plot(res1, type='l', xlab='month',ylab='price')
data.ts= ts(data$Price_total, frequency = 1)
fit1 = tslm(data.ts ~ trend + season)
summary(fit1)
plot(data.ts, type='l', xlab='month',ylab='price')
abline(fit1)
data.ts= ts(data$Price_total, frequency = 1)
fit1 = tslm(data.ts ~ trend + Customers_total)
fit1 = tslm(data.ts ~ trend + data$Customers_total)
fit1 = tslm(data.ts ~ data$Customers_total)
fit1 = tslm(data.ts ~ Customers_total)
fit1 = tslm(data.ts ~ trend)
fit1 = tslm(data.ts ~ Customers_total)
View(data)
fit1 = tslm(data.ts ~ total_renew_source)
data.ts= ts(Price_total ~ Customers_total, frequency = 1)
data.ts= ts(Price_total ~ Customers_total, frequency = 1, data=data)
data.ts= ts(Price_total, frequency = 1)
data.ts= ts(Price_total, frequency = 1,)
data.ts= ts(data$Price_total, frequency = 1)
fit1 = tslm(data.ts)
fit1 = tslm(Price_total ~ Customers_total )
fit1 = tslm(data$Price_total ~ Customers_total )
fit1 = tslm(data$Price_total ~ data$Customers_total )
fit1 = tslm(data.ts ~ data$Customers_total )
fit1 = tslm(data.ts ~ data.ts$Customers_total )
fit1 = tslm(data.ts ~ customers.ts)
customers.ts = ts(data$Customers_total, frequency=1)
fit1 = tslm(data.ts ~ customers.ts)
summary(fit1)
fit1 = tslm(data.ts ~ customers.ts)
summary(fit1)
plot(data.ts, type='l', xlab='month',ylab='price')
plot(fit1, type='l', xlab='month',ylab='price')
plot(data.ts, type='l', xlab='month',ylab='price')
abline(fit1)
# check residuals
res1=residuals(fit1)
plot(res1, type='l', xlab='month',ylab='price')
Plot for Residential
# Note about customers: when customers = 0, this doesn't make sense. Likely
# data was not being accuractely collected then
# Starting in 2007, data collection begins to become more reliable
filtered_residential <- data[data$Customers_residential > 0, ]
filtered_commercial <- data[data$Customers_commercial > 0, ]
filtered_industrial <- data[data$Customers_industrial > 0, ]
filtered_transportation <- data[data$Customers_transportation > 0, ]
filtered_total <- data[data$Customers_total > 0, ]
# Function to create a common theme
custom_theme <- function() {
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
}
# option to remove scientific notation
options(scipen = 999)
# Plot for Customers_residential (houses)
ggplot(filtered_residential, aes(x = DATE, y = Customers_residential)) +
geom_line(colour = 'orange') +
labs(x = "Time", y = "Number of customers", title = "Residential's customers") +
scale_y_continuous(limits = c(0, max(filtered_residential$Customers_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_commercial (malls, businesses)
ggplot(filtered_commercial, aes(x = DATE, y = Customers_commercial)) +
geom_line(colour = 'blue') +
labs(x = "Time", y = "Number of customers", title = "Commercial's customers") +
scale_y_continuous(limits = c(0, max(filtered_commercial$Customers_commercial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_industrial (factory)
ggplot(filtered_industrial, aes(x = DATE, y = Customers_industrial)) +
geom_line(colour = 'green') +
labs(x = "Time", y = "Number of customers", title = "Industrial's customers") +
scale_y_continuous(limits = c(0, max(filtered_industrial$Customers_industrial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation
ggplot(filtered_transportation, aes(x = DATE, y = Customers_transportation)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_transportation$Customers_transportation))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation (cars, trucks, trains, planes, and boats)
ggplot(filtered_total, aes(x = DATE, y = Customers_total)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_total$Customers_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Note about customers: when customers = 0, this doesn't make sense. Likely
# data was not being accuractely collected then
# Starting in 2007, data collection begins to become more reliable
filtered_residential <- data[data$Customers_residential > 0, ]
filtered_commercial <- data[data$Customers_commercial > 0, ]
filtered_industrial <- data[data$Customers_industrial > 0, ]
filtered_transportation <- data[data$Customers_transportation > 0, ]
filtered_total <- data[data$Customers_total > 0, ]
# Function to create a common theme
custom_theme <- function() {
theme_minimal() +
theme(legend.position = 'bottom',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
}
# option to remove scientific notation
options(scipen = 999)
# Plot for Customers_residential (houses)
ggplot(filtered_residential, aes(x = DATE, y = Customers_residential)) +
geom_line(colour = 'orange') +
labs(x = "Time", y = "Number of customers", title = "Residential's customers") +
scale_y_continuous(limits = c(0, max(filtered_residential$Customers_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_commercial (malls, businesses)
ggplot(filtered_commercial, aes(x = DATE, y = Customers_commercial)) +
geom_line(colour = 'blue') +
labs(x = "Time", y = "Number of customers", title = "Commercial's customers") +
scale_y_continuous(limits = c(0, max(filtered_commercial$Customers_commercial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_industrial (factory)
ggplot(filtered_industrial, aes(x = DATE, y = Customers_industrial)) +
geom_line(colour = 'green') +
labs(x = "Time", y = "Number of customers", title = "Industrial's customers") +
scale_y_continuous(limits = c(0, max(filtered_industrial$Customers_industrial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation
ggplot(filtered_transportation, aes(x = DATE, y = Customers_transportation)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_transportation$Customers_transportation))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation (cars, trucks, trains, planes, and boats)
ggplot(filtered_total, aes(x = DATE, y = Customers_total)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_total$Customers_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Residential
# seasonality and residential consumption has upward trend with variability
ggplot(data, aes(x = DATE, y = Sales_residential)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Residential consumption") +
scale_y_continuous(limits = c(0, max(data$Sales_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# note to look for monthly or annual population data in DC
# Plot for Commercial Sales
ggplot(data, aes(x = DATE, y = Sales_commercial)) +
geom_line(colour = 'blue') +
labs(x = "Time", y = "MWh", title = "Commercial Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_commercial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Sales_industrial)) +
geom_line(colour = 'green') +
labs(x = "Time", y = "MWh", title = "Industrial Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_industrial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Transportation Sales
ggplot(data, aes(x = DATE, y = Sales_transportation)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Transportation Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_transportation))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Total Sales
ggplot(data, aes(x = DATE, y = Sales_total)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Total Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_total)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2021-01-01")), linetype='dashed',color='blue')+
labs(x = "Time", y = "Average Price (cents/kWh)", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
ggplot(data, aes(x = DATE, y = Price_residential)) +
geom_line(colour = 'darkgreen') +
geom_vline(xintercept = as.numeric(as.Date("2005-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2013-01-01")), linetype='dashed',color='blue')+
geom_vline(xintercept = as.numeric(as.Date("2021-01-01")), linetype='dashed',color='blue')+
labs(x = "Time", y = "Average Price (cents/kWh)", title = "Price over time") +
scale_y_continuous(limits = c(0, max(data$Price_total)), breaks = seq(0, max(data$Price_total), by = 2)) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme_minimal() +
custom_theme()
acf(data$Solar.Thermal.and.Photovoltaic)  #WEIRD#
acf(data[data$DATE > as.numeric('2012-01-01')]$Solar.Thermal.and.Photovoltaic)  #WEIRD#
acf(data[data$DATE > as.Date('2012-01-01'),]$Solar.Thermal.and.Photovoltaic)  #WEIRD#
acf(data[data$DATE > as.Date('2012-01-01'),]$Solar.Thermal.and.Photovoltaic)  #WEIRD#
acf(data$Solar.Thermal.and.Photovoltaic >0 )  #WEIRD#
acf(data[data$Solar.Thermal.and.Photovoltaic > 0,]$Solar.Thermal.and.Photovoltaic)  #WEIRD#
acf(data$Sales_transportation) # trend
acf(data$Sales_residential) # Seasonal
acf(data$Price_total)
print(correlated_tuples)
# Plot for Total Sales
ggplot(data, aes(x = DATE, y = Sales_total)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Total Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# seasonality and residential consumption has upward trend with variability
ggplot(data, aes(x = DATE, y = Sales_residential)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Residential consumption") +
scale_y_continuous(limits = c(0, max(data$Sales_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# note to look for monthly or annual population data in DC
ggplot(data, aes(x = DATE, y = Sales_commercial)) +
geom_line(colour = 'blue') +
labs(x = "Time", y = "MWh", title = "Commercial Sales") +
scale_y_continuous(limits = c(0, max(data$Sales_commercial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_commercial (malls, businesses)
ggplot(filtered_commercial, aes(x = DATE, y = Customers_commercial)) +
geom_line(colour = 'blue') +
labs(x = "Time", y = "Number of customers", title = "Commercial's customers") +
scale_y_continuous(limits = c(0, max(filtered_commercial$Customers_commercial))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_residential (houses)
ggplot(filtered_residential, aes(x = DATE, y = Customers_residential)) +
geom_line(colour = 'orange') +
labs(x = "Time", y = "Number of customers", title = "Residential's customers") +
scale_y_continuous(limits = c(0, max(filtered_residential$Customers_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation (cars, trucks, trains, planes, and boats)
ggplot(filtered_total, aes(x = DATE, y = Customers_total)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_total$Customers_total))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_transportation
ggplot(filtered_transportation, aes(x = DATE, y = Customers_transportation)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "Number of customers", title = "Transportation's customers") +
scale_y_continuous(limits = c(0, max(filtered_transportation$Customers_transportation))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
ggplot(data, aes(x = DATE, y = Sales_residential)) +
geom_line(colour = 'red') +
labs(x = "Time", y = "MWh", title = "Residential consumption") +
scale_y_continuous(limits = c(0, max(data$Sales_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
# Plot for Customers_residential (houses)
ggplot(filtered_residential, aes(x = DATE, y = Customers_residential)) +
geom_line(colour = 'orange') +
labs(x = "Time", y = "Number of customers", title = "Residential's customers") +
scale_y_continuous(limits = c(0, max(filtered_residential$Customers_residential))) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
custom_theme()
